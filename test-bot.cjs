const fetch = require("node-fetch");

const BOT_TOKEN = "7557010853:AAFj5GmKw5V3mKStf_m9w752vg0bPVy1PSw";
const BOT_API_URL = `https://api.telegram.org/bot${BOT_TOKEN}`;

let lastUpdateId = 0;

async function handleStartCommand(chatId, user) {
    const welcomeMessage = `üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizGo!</b>

üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || "–ò–≥—Ä–æ–∫"}!

üéÆ <b>QuizGo</b> - —ç—Ç–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º!

üöÄ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!`;
    
    const keyboard = {
        inline_keyboard: [[{
            text: "üéÆ –ò–≥—Ä–∞—Ç—å –≤ QuizGo",
            web_app: { url: "https://dimaboretskiy.github.io/quiz/" }
        }]]
    };
    
    await sendMessage(chatId, welcomeMessage, { reply_markup: keyboard });
}

async function sendMessage(chatId, text, options = {}) {
    try {
        const response = await fetch(`${BOT_API_URL}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                chat_id: chatId,
                text: text,
                parse_mode: "HTML",
                ...options
            })
        });
        const result = await response.json();
        if (result.ok) {
            console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç ${chatId}`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:`, result);
        }
        return result;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        throw error;
    }
}

async function getUpdates() {
    try {
        const response = await fetch(`${BOT_API_URL}/getUpdates?offset=${lastUpdateId + 1}&timeout=30`);
        const result = await response.json();
        
        if (result.ok && result.result.length > 0) {
            for (const update of result.result) {
                await processUpdate(update);
                lastUpdateId = update.update_id;
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:", error);
    }
}

async function processUpdate(update) {
    if (!update.message) return;
    
    const { message } = update;
    const { chat, text, from } = message;
    const chatId = chat.id;
    
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${from.username || from.first_name}: ${text}`);
    
    if (text && text.toLowerCase() === "/start") {
        await handleStartCommand(chatId, from);
    }
}

async function main() {
    console.log("ü§ñ QuizGo Bot –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling...");
    console.log("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
    console.log("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏");
    
    setInterval(getUpdates, 1000);
}

main().catch(console.error);
