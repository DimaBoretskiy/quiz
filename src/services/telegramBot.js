import { BOT_CONFIG } from "../config/bot.js";

class TelegramBotService {
  constructor() {
    this.token = BOT_CONFIG.token;
    this.apiUrl = `https://api.telegram.org/bot${this.token}`;
  }

  async sendMessage(chatId, text, options = {}) {
    try {
      const response = await fetch(`${this.apiUrl}/sendMessage`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: chatId,
          text: text,
          parse_mode: "HTML",
          ...options
        })
      });
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      throw error;
    }
  }

  async sendQuizMessage(chatId, text = "üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QuizGo!") {
    const keyboard = {
      inline_keyboard: [[{
        text: "üéÆ –ò–≥—Ä–∞—Ç—å –≤ QuizGo",
        web_app: { url: "https://dimaboretskiy.github.io/quiz/" }
      }]]
    };
    return this.sendMessage(chatId, text, { reply_markup: keyboard });
  }

  async sendLeaderboard(chatId, leaderboard) {
    let text = "üèÜ <b>–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ QuizGo</b>

";
    if (leaderboard.length === 0) {
      text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º! üöÄ";
    } else {
      leaderboard.slice(0, 10).forEach((player, index) => {
        const medal = index === 0 ? "ü•á" : index === 1 ? "ü•à" : index === 2 ? "ü•â" : "üèÖ";
        text += `${medal} <b>${player.name || `–ò–≥—Ä–æ–∫ ${index + 1}`}</b>: ${player.score} –±–∞–ª–ª–æ–≤
`;
      });
    }
    text += "
üéØ <i>–ò–≥—Ä–∞–π—Ç–µ –∏ —É–ª—É—á—à–∞–π—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!</i>";
    
    const keyboard = {
      inline_keyboard: [[{
        text: "üéÆ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
        web_app: { url: "https://dimaboretskiy.github.io/quiz/" }
      }]]
    };
    return this.sendMessage(chatId, text, { reply_markup: keyboard });
  }

  async sendHelp(chatId) {
    const text = `üéØ <b>QuizGo - –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ —Å —Ç–∞–π–º–µ—Ä–æ–º</b>

üìö <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –£ –≤–∞—Å 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∞–µ—Ç–µ 1 –±–∞–ª–ª

üèÜ <b>–§—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ —Å –ª—É—á—à–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –¥–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ Telegram

üéÆ <b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
/quiz - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
/leaderboard - –ü–æ–∫–∞–∑–∞—Ç—å –ª–∏–¥–µ—Ä–±–æ—Ä–¥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<i>–£–¥–∞—á–∏ –≤ –∏–≥—Ä–µ! üöÄ</i>`;
    
    const keyboard = {
      inline_keyboard: [[{
        text: "üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
        web_app: { url: "https://dimaboretskiy.github.io/quiz/" }
      }]]
    };
    return this.sendMessage(chatId, text, { reply_markup: keyboard });
  }

  async setCommands() {
    try {
      const response = await fetch(`${this.apiUrl}/setMyCommands`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ commands: BOT_CONFIG.commands })
      });
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:", error);
      throw error;
    }
  }

  async getBotInfo() {
    try {
      const response = await fetch(`${this.apiUrl}/getMe`);
      return await response.json();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:", error);
      throw error;
    }
  }
}

export default new TelegramBotService();
